p3 <- ggplot(df, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Battery Power vs Price Range")
grid.arrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(df, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "RAM vs Price Range")
corr <- round(cor(df), 1)
head(corr[, 1:6])
getwd()
setwd('C:\\Users\\hp\\Desktop\\AI\\R Programming\\Smartphone Prices')
# CSV
df <- import("./train.csv")
head(df)
# View in table format the dataset
View(df)
# List all columns names in the dataset
names(df)
# Inspect the number of observables, features and data types in the dataset
str(df)
# Getting set of descriptive statistics, depending on the type of variable.
# In case of a Numerical Variable -> Gives Mean, Median, Mode, Range and Quartiles.
# In case of a Factor Variable -> Gives a table with the frequencies.
# In case of Factor + Numerical Variables -> Gives the number of missing values.
# In case of character variables -> Gives the length and the class.
summary(df)
# Checking for Missing values
missing_values <- df %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
corr <- round(cor(df), 1)
head(corr[, 1:6])
p.mat <- cor_pmat(df)
pacman::p_load(pacman,dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr, gridExtra, scales, ggcorrplot)
p.mat <- cor_pmat(df)
head(p.mat[, 1:4])
ggcorrplot(corr)
corr <- round(cor(df), 8)
head(corr[, 1:6])
ggplot(df, aes(x=fc, color=blue)) +
geom_histogram(fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=red)) +
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=c('blue')) +
ggplot(df, aes(x=fc) +
# Overlaid histograms
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc) +
ggplot(df, aes(x=fc)) +
geom_histogram(fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc)) +
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc) +
ggplot(df, aes(x=fc, color=fc) +
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(binwidth = 15, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(binwidth = 15, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(binwidth = 55, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(binwidth = 55, fill="white", alpha=0.5, position="identity")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(binwidth = 5, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(binwidth = 5, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(binwidth = 2, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(binwidth = 2, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=pc)) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=fc)) +
geom_histogram(binwidth = 1, fill="white") +
scale_fill_gradient(low="blue", high="red")
ggplot(df, aes(x=fc, color="blue")) +
geom_histogram(binwidth = 1, fill="white") +
scale_fill_gradient(low="blue", high="red")
# Overlaid histograms
ggplot(df, aes(x=pc, color="red")) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color="blue")) +
geom_histogram(binwidth = 1, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color="red")) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color=values)) +
geom_histogram(binwidth = 1, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=values)) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
values=c("red", "blue")
ggplot(df, aes(x=fc, color=values)) +
geom_histogram(binwidth = 1, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=values)) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
values= as.factor(c("red", "blue"))
ggplot(df, aes(x=fc, color=values)) +
geom_histogram(binwidth = 1, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color=values)) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, color="blue")) +
geom_histogram(binwidth = 1, fill="white")
# Overlaid histograms
ggplot(df, aes(x=pc, color="red")) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=fc, fill="blue",color="blue")) +
geom_histogram(binwidth = 1, fill="white")
ggplot(df, aes(x=fc, fill="blue",color="blue")) +
geom_histogram(binwidth = 1, fill="white")
ggplot(df, aes(x=fc, fill="blue",color="blue")) +
geom_histogram(binwidth = 1)
# Overlaid histograms
ggplot(df, aes(x=pc, color="red")) +
geom_histogram(binwidth = 1, fill="white", alpha=0.5, position="identity")
# Overlaid histograms
ggplot(df, aes(x=pc, color="red")) +
geom_histogram(binwidth = 1, alpha=0.5, position="identity")
# Overlaid histograms
ggplot(df, aes(x=pc,fill="red", color="red")) +
geom_histogram(binwidth = 1, alpha=0.5, position="identity")
ggplot(df, aes(x=fc, fill="blue",color="blue")) +
geom_histogram(binwidth = 1)
# Overlaid histograms
ggplot(df, aes(x=pc,fill="red", color="red")) +
geom_histogram(binwidth = 1, alpha=0.5, position="identity")
d = df.frame(x = c(fc, pc),
type=rep(c("A", "B"), c(length(fc), length(pc))))
d = data.frame(x = c(fc, pc),
type=rep(c("A", "B"), c(length(fc), length(pc))))
d = data.frame(x = c(df$fc, df$pc),
type=rep(c("A", "B"), c(length(fc), length(pc))))
d = data.frame(x = c(df$fc, df$pc),
type=rep(c("A", "B"), c(length(df$fc), length(df$pc))))
ggplot(d) +
geom_density(aes(x=x, colour=type))
ggplot(d) +
geom_histogram(aes(x=x, colour=type))
d = data.frame(x = c(df$fc, df$pc),
type=rep(c("A", "B"), c(length(df$fc), length(df$pc))))
ggplot(d) +
geom_histogram(aes(x=x, colour=type))
ggplot() +
geom_histogram(aes(x=df$fc),fill=2) +
geom_histogram(aes(x=df$pc))
ggplot(d) +
geom_histogram(aes(x=x)) +
facet_wrap(~type)
ggplot(d, aes(x, fill = type)) +
geom_bar(position = 'identity', alpha = .5)
data = data.frame(x = c(df$fc, df$pc),
Camera = rep(c("Front Camera", "Primary Camera"), c(length(df$fc), length(df$pc))))
ggplot(data, aes(x, fill = Camera)) +
geom_bar(position = 'identity', alpha = .5)
data = data.frame(MagaPixels = c(df$fc, df$pc),
Camera = rep(c("Front Camera", "Primary Camera"), c(length(df$fc), length(df$pc))))
ggplot(data, aes(MagaPixels, fill = Camera)) +
geom_bar(position = 'identity', alpha = .5)
#creating indices
trainIndex <- createDataPartition(df,p=0.75,list=FALSE)
pacman::p_load(pacman,dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr, gridExtra, scales, ggcorrplot, caret)
#creating indices
trainIndex <- createDataPartition(df,p=0.75,list=FALSE)
#creating indices
trainIndex <- createDataPartition(df,p=0.65,list=FALSE)
#creating indices
trainIndex <- createDataPartition(df,p=0.55,list=FALSE)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- mtcars[train_ind, ]
test <- mtcars[-train_ind, ]
train <- df[train_ind, ]
test <- df[-train_ind, ]
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
install.packages('e1071')
classifier = svm(formula = price_range ~ .,
data = train,
type = 'C-classification',
kernel = 'linear')
library(e1071)
classifier = svm(formula = price_range ~ .,
data = train,
type = 'C-classification',
kernel = 'linear')
x_train <- subset(train, select = -price_range)
y_train <- price_range
y_train <- train$price_range
model <- svm(x_train, y_train)
head(x_train)
print(model)
summary(model)
x_test <- subset(test, select = -price_range)
y_test <- test$price_range
# test with train data
pred <- predict(model, x_test)
# Check accuracy:
table(pred, y_test)
#Plot the predictions and the plot to see our model fit
points(x_test, pred, col = "blue", pch=4)
#Linear model has a residuals part which we can extract and directly calculate rmse
error <- model$residuals
lm_error <- sqrt(mean(error^2)) # 3.832974
lm_error
#For svm, we have to manually calculate the difference between actual values (train$y) with our predictions (pred)
error <- y_test - pred
svm_error <- sqrt(mean(error_2^2)) # 2.696281
svm_error <- sqrt(mean(error^2)) # 2.696281
svm_error
# Making the Confusion Matrix
cm = table(x_test, pred)
# Making the Confusion Matrix
cm = table(test, pred)
# Making the Confusion Matrix
cm = table(y_test, pred)
cm
model <- svm(x_train, y_train, type = 'C-classification',
kernel = 'linear')
print(model)
summary(model)
# test with train data
pred <- predict(model, x_test)
# Check accuracy:
table(pred, y_test)
#For svm, we have to manually calculate the difference between actual values (train$y) with our predictions (pred)
error <- y_test - pred
svm_error <- sqrt(mean(error^2)) # 2.696281
svm_error
# Making the Confusion Matrix
cm = table(y_test, pred)
cm
acc <- svm.accuracy(pred, y_test)
acc <- model.accuracy(pred, y_test)
library(caret)
confusionMatrix(y_test, pred)
y_test
pred
pred <- as.factor(pred)
confusionMatrix(y_test, pred)
pred
confusionMatrix(pred, y_test)
y_test <- as.factor(y_test)
confusionMatrix(y_test, pred)
cm
.rs.restartR() Restart Kernel Session
.rs.restartR() # Restart Kernel Session
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
getwd()
setwd('C:\\Users\\hp\\Desktop\\AI\\R Programming\\Smartphone Prices')
# CSV
df <- import("./train.csv")
head(df)
# View in table format the dataset
View(df)
# List all columns names in the dataset
names(df)
# Inspect the number of observables, features and data types in the dataset
str(df)
# Getting set of descriptive statistics, depending on the type of variable.
# In case of a Numerical Variable -> Gives Mean, Median, Mode, Range and Quartiles.
# In case of a Factor Variable -> Gives a table with the frequencies.
# In case of Factor + Numerical Variables -> Gives the number of missing values.
# In case of character variables -> Gives the length and the class.
summary(df)
# Checking for Missing values
missing_values <- df %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
corr <- round(cor(df), 8)
head(corr[, 1:6])
ggcorrplot(corr)
df$blue <- as.factor(df$blue)
df$dual_sim <- as.factor(df$dual_sim)
df$four_g <- as.factor(df$four_g)
df$price_range <- as.factor(df$price_range)
# Subplots using filtered dataset
p1 <-  ggplot(df, aes(x=blue, fill=blue)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "Bluetooth") +
scale_x_discrete(labels = c('Not Supported','Supported'))
p2 <- ggplot(df, aes(x=dual_sim, fill=dual_sim)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "Dual Sim") +
scale_x_discrete(labels = c('Not Supported','Supported'))
p3 <- ggplot(df, aes(x=four_g, fill=four_g)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "4 G") +
scale_x_discrete(labels = c('Not Supported','Supported'))
grid.arrange(p1, p2, p3, nrow = 1)
prop.table(table(df$blue)) # cell percentages
prop.table(table(df$dual_sim)) # cell percentages
prop.table(table(df$four_g)) # cell percentages
# Subplots using filtered dataset
p1 <-  ggplot(df, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Battery Power vs Price Range")
p2 <- ggplot(df, aes(x=price_range, y = mobile_wt, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Phone Weight vs Price Range")
p3 <- ggplot(df, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "RAM vs Price Range")
grid.arrange(p1, p2, p3, nrow = 1)
data = data.frame(MagaPixels = c(df$fc, df$pc),
Camera = rep(c("Front Camera", "Primary Camera"), c(length(df$fc), length(df$pc))))
ggplot(data, aes(MagaPixels, fill = Camera)) +
geom_bar(position = 'identity', alpha = .5)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
x_train <- subset(train, select = -price_range)
y_train <- train$price_range
x_test <- subset(test, select = -price_range)
y_test <- test$price_range
model <- svm(x_train, y_train, type = 'C-classification',
kernel = 'linear')
print(model)
model <- svm(x_train, y_train, type = 'C-classification',
kernel = 'linear')
df$blue <- as.numeric(df$blue)
df$dual_sim <- as.numeric(df$dual_sim)
df$four_g <- as.numeric(df$four_g)
df$price_range <- as.numeric(df$price_range)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
x_train <- subset(train, select = -price_range)
y_train <- train$price_range
x_test <- subset(test, select = -price_range)
y_test <- test$price_range
model <- svm(x_train, y_train, type = 'C-classification',
kernel = 'linear')
print(model)
summary(model)
# test with train data
pred <- predict(model, x_test)
pred <- as.factor(pred)
y_test <- as.factor(y_test)
confusionMatrix(y_test, pred)
.rs.restartR() # Restart Kernel Session
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
getwd()
setwd('C:\\Users\\hp\\Desktop\\AI\\R Programming\\Smartphone Prices')
# CSV
df <- import("./train.csv")
head(df)
# List all columns names in the dataset
names(df)
# Inspect the number of observables, features and data types in the dataset
str(df)
# Getting set of descriptive statistics, depending on the type of variable.
# In case of a Numerical Variable -> Gives Mean, Median, Mode, Range and Quartiles.
# In case of a Factor Variable -> Gives a table with the frequencies.
# In case of Factor + Numerical Variables -> Gives the number of missing values.
# In case of character variables -> Gives the length and the class.
summary(df)
# Checking for Missing values
missing_values <- df %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
missing_values %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
corr <- round(cor(df), 8)
head(corr[, 1:6])
ggcorrplot(corr)
df$blue <- as.factor(df$blue)
df$dual_sim <- as.factor(df$dual_sim)
df$four_g <- as.factor(df$four_g)
df$price_range <- as.factor(df$price_range)
# Subplots using filtered dataset
p1 <-  ggplot(df, aes(x=blue, fill=blue)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "Bluetooth") +
scale_x_discrete(labels = c('Not Supported','Supported'))
p2 <- ggplot(df, aes(x=dual_sim, fill=dual_sim)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "Dual Sim") +
scale_x_discrete(labels = c('Not Supported','Supported'))
p3 <- ggplot(df, aes(x=four_g, fill=four_g)) +
theme_bw() +
geom_bar() +
ylim(0, 1050) +
labs(title = "4 G") +
scale_x_discrete(labels = c('Not Supported','Supported'))
grid.arrange(p1, p2, p3, nrow = 1)
prop.table(table(df$blue)) # cell percentages
prop.table(table(df$dual_sim)) # cell percentages
prop.table(table(df$four_g)) # cell percentages
# Subplots using filtered dataset
p1 <-  ggplot(df, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Battery Power vs Price Range")
p2 <- ggplot(df, aes(x=price_range, y = mobile_wt, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Phone Weight vs Price Range")
p3 <- ggplot(df, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "RAM vs Price Range")
grid.arrange(p1, p2, p3, nrow = 1)
data = data.frame(MagaPixels = c(df$fc, df$pc),
Camera = rep(c("Front Camera", "Primary Camera"), c(length(df$fc), length(df$pc))))
ggplot(data, aes(MagaPixels, fill = Camera)) +
geom_bar(position = 'identity', alpha = .5)
df$blue <- as.numeric(df$blue)
df$dual_sim <- as.numeric(df$dual_sim)
df$four_g <- as.numeric(df$four_g)
df$price_range <- as.numeric(df$price_range)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
x_train <- subset(train, select = -price_range)
y_train <- train$price_range
x_test <- subset(test, select = -price_range)
y_test <- test$price_range
model <- svm(x_train, y_train, type = 'C-classification',
kernel = 'linear')
print(model)
summary(model)
# test with train data
pred <- predict(model, x_test)
#pred <- as.factor(pred)
#y_test <- as.factor(y_test)
confusionMatrix(y_test, pred)
pred <- as.factor(pred)
y_test <- as.factor(y_test)
confusionMatrix(y_test, pred)
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
getwd()
setwd('C:\\Users\\hp\\Desktop\\AI\\R Programming\\Smartphone Prices')
# CSV
df <- import("./mobile_price.csv")
head(df)
# View in table format the dataset
View(df)
install.packages("pacman")
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
getwd()
setwd('C:\\Users\\hp\\Desktop\\AI\\R Programming\\Smartphone Prices')
# CSV
df <- import("./mobile_price.csv")
head(df)
# View in table format the dataset
View(df)
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
